type User {
    id: ID!
    oauthLoginIds: [LoginTypeCorrelation!]!
    validatedInvite: Boolean!
    email: String!
    firstName: String!
    lastName: String!
    profilePictureUrl: String
    logbook: [Log!]!
}

type Log {
    id: ID!
    originalFileName: String!
    conditions: String
    distance(system: MeasurementSystem = METRIC): Float!
    duration: Float!
    startDate: String!
    endDate: String!
    locationName: String!
    runCount: Int!
    topSpeed(system: MeasurementSystem = METRIC): Float!
    verticalDistance(system: MeasurementSystem = METRIC): Float!
    details: [LogDetail!]!
}

type LogDetail {
    type: LogDetailType!
    averageSpeed(system: MeasurementSystem = METRIC): Float!
    distance(system: MeasurementSystem = METRIC): Float!
    duration: Float!
    startDate: String!
    endDate: String!
    maxAltitude(system: MeasurementSystem = METRIC): Float!
    minAltitude(system: MeasurementSystem = METRIC): Float!
    topSpeed(system: MeasurementSystem = METRIC): Float!
    topSpeedAltitude(system: MeasurementSystem = METRIC): Float!
    verticalDistance(system: MeasurementSystem = METRIC): Float!
}

enum LogDetailType {
    RUN
    LIFT
}

enum MeasurementSystem {
    METRIC
    IMPERIAL
}

enum LeaderboardSort {
    DISTANCE
    RUN_COUNT
    TOP_SPEED
    VERTICAL_DISTANCE
}

type AuthorizationToken {
    token: ID!
    expiryDate: String!
    validatedInvite: Boolean!
}

enum LoginType {
    APPLE
    GOOGLE
}

type LoginTypeCorrelation {
    type: LoginType!
    id: String!
}

input LoginTypeCorrelationInput {
    type: LoginType!
    id: ID!
    token: ID
}

input UserDataPair {
    key: String!
    value: String!
}

type Query {
    selfLookup: User
    userLookup(id: ID!): User
    leaderboard(sortBy: LeaderboardSort = VERTICAL_DISTANCE, limit: Int): [User!]!
}

type Mutation {
    createUserOrSignIn(
        oauthLoginId: LoginTypeCorrelationInput!
        email: String
        userData: [UserDataPair!]
    ): AuthorizationToken
    combineOAuthAccounts(combineWith: LoginTypeCorrelationInput!): User!
    createUserProfilePictureUploadUrl: String!
    createUserRecordUploadUrl(requestedPaths: [String!]!): [String]!
    deleteUser: User!
    editUser(userData: [UserDataPair!]!): User!
    createInviteKey: String!
    resolveInviteKey(inviteKey: ID!): User!
}
