#!/usr/bin/env ts-node

import { writeFileSync } from "fs";
import { sync } from "glob";
import { basename, dirname, relative, resolve } from "path";

const resolversPath = resolve(__dirname, "../../graphql/resolvers/**/*.ts");
const files = sync(resolversPath).filter((file) => !file.includes("index.ts"));

const directories = Array.from(new Set(files.sort().map((file) => basename(dirname(file)))));

const imports = files.sort().reduce(
    (acc, file) => {
        const dirName = basename(dirname(file));
        const resolver = `${dirName}_${basename(file, ".ts")}`;
        const relativePath = relative(resolve(__dirname, "../../graphql/resolvers"), file);
        const removeExtension = relativePath.replace(/\.ts$/, "");
        acc[resolver] = `./${removeExtension}`;
        return acc;
    },
    {} as Record<string, string>
);

const content = `// Generated by scripts/code-gen/generateResolvers.ts. Run "npm run generate" to regenerate.

${Object.entries(imports)
    .map(([key, value]) => `import ${key} from "${value}";`)
    .join("\n")}

// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
const resolvers: Record<string, Record<string, Function>> = {};

${directories.map((dir) => `resolvers["${dir}"] = {};`).join("\n")}

${Object.keys(imports)
    .map((key) => {
        const underscoreIndex = key.indexOf("_");
        const dirName = key.substring(0, underscoreIndex);
        const fileName = key.substring(underscoreIndex + 1);
        return `resolvers["${dirName}"]["${fileName}"] = ${key};`;
    })
    .join("\n")}

export default resolvers;
`;

writeFileSync(resolve(__dirname, "../../graphql/resolvers/index.ts"), content);
