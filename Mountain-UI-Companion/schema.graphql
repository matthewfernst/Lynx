type User {
    id: ID!
    appleId: ID
    googleId: ID
    validatedInvite: Boolean!
    email: String!
    firstName: String!
    lastName: String!
    profilePictureUrl: String
    logbook: [Log!]!
}

type Log {
    id: ID!
    originalFileName: String!
    conditions: String
    distance(system: MeasurementSystem = IMPERIAL): Float!
    duration: Float!
    startDate: String!
    endDate: String!
    locationName: String!
    runCount: Int!
    topSpeed(system: MeasurementSystem = IMPERIAL): Float!
    verticalDistance(system: MeasurementSystem = IMPERIAL): Float!
    details: [LogDetail!]!
}

enum MeasurementSystem {
    METRIC
    IMPERIAL
}

type LogDetail {
    type: LogDetailType!
    averageSpeed(system: MeasurementSystem = IMPERIAL): Float!
    distance(system: MeasurementSystem = IMPERIAL): Float!
    duration: Float!
    startDate: String!
    endDate: String!
    maxAltitude(system: MeasurementSystem = IMPERIAL): Float!
    minAltitude(system: MeasurementSystem = IMPERIAL): Float!
    topSpeed(system: MeasurementSystem = IMPERIAL): Float!
    topSpeedAltitude(system: MeasurementSystem = IMPERIAL): Float!
    verticalDistance(system: MeasurementSystem = IMPERIAL): Float!
}

enum LogDetailType {
    RUN
    LIFT
}

type AuthorizationToken {
    token: ID!
    expiryDate: String!
}

enum LoginType {
    APPLE
    GOOGLE
}

input KeyValuePair {
    key: String!
    value: String!
}

type Query {
    selfLookup: User
    userLookup(id: ID!): User
    leaderboard: [User!]!
}

type Mutation {
    createUserOrSignIn(
        type: LoginType!
        id: ID!,
        token: ID!,
        email: String,
        userData: [KeyValuePair!]
    ): AuthorizationToken
    createUserProfilePictureUploadUrl: String!
    createUserRecordUploadUrl(requestedPaths: [String!]!): [String]!
    deleteUser: User!
    editUser(userData: [KeyValuePair!]!): User!
    createInviteKey: String!
    resolveInviteKey: Boolean!
}
